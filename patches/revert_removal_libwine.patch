diff --git a/loader/Makefile.in b/loader/Makefile.in
index e8c271f15d..75a443d479 100644
--- a/loader/Makefile.in
+++ b/loader/Makefile.in
@@ -22,11 +22,11 @@ main_EXTRADEFS = -DDLLDIR=\"${dlldir}\" -DBIN_TO_DLLDIR=\"`${MAKEDEP} -R ${bindi
 
 wine_OBJS = main.o
 wine_DEPS = $(WINELOADER_DEPENDS)
-wine_LDFLAGS = $(WINELOADER_LDFLAGS) $(LDEXECFLAGS) $(PTHREAD_LIBS)
+wine_LDFLAGS = $(WINELOADER_LDFLAGS) $(LDEXECFLAGS) -lwine $(PTHREAD_LIBS)
 
 wine64_OBJS = main.o
 wine64_DEPS = $(WINELOADER_DEPENDS)
-wine64_LDFLAGS = $(WINELOADER_LDFLAGS) $(LDEXECFLAGS) $(PTHREAD_LIBS)
+wine64_LDFLAGS = $(WINELOADER_LDFLAGS) $(LDEXECFLAGS) -lwine $(PTHREAD_LIBS)
 
 wine_preloader_OBJS = preloader.o preloader_mac.o
 wine_preloader_DEPS = $(WINELOADER_DEPENDS)
diff --git a/loader/main.c b/loader/main.c
index fb40e90f97..a92276fa41 100644
--- a/loader/main.c
+++ b/loader/main.c
@@ -21,17 +21,147 @@
 #include "config.h"
 #include "wine/port.h"
 
-#include <pthread.h>
+#include <errno.h>
 #include <stdio.h>
 #include <stdlib.h>
+#ifdef HAVE_SYS_MMAN_H
+# include <sys/mman.h>
+#endif
+#ifdef HAVE_SYS_RESOURCE_H
+# include <sys/resource.h>
+#endif
+#ifdef HAVE_SYS_SYSCALL_H
+# include <sys/syscall.h>
+#endif
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
 
+#include "wine/library.h"
 #include "main.h"
 
 extern char **environ;
 
+extern const char *wine_get_build_id(void);
+
 /* the preloader will set this variable */
 const struct wine_preload_info *wine_main_preload_info = NULL;
 
+/***********************************************************************
+ *           check_command_line
+ *
+ * Check if command line is one that needs to be handled specially.
+ */
+static void check_command_line( int argc, char *argv[] )
+{
+    static const char usage[] =
+        "Usage: wine PROGRAM [ARGUMENTS...]   Run the specified program\n"
+        "       wine --help                   Display this help and exit\n"
+        "       wine --version                Output version information and exit";
+
+    if (argc <= 1)
+    {
+        fprintf( stderr, "%s\n", usage );
+        exit(1);
+    }
+    if (!strcmp( argv[1], "--help" ))
+    {
+        printf( "%s\n", usage );
+        exit(0);
+    }
+    if (!strcmp( argv[1], "--version" ))
+    {
+        printf( "%s\n", wine_get_build_id() );
+        exit(0);
+    }
+}
+
+
+#ifdef __ANDROID__
+
+static int pre_exec(void)
+{
+#if defined(__i386__) || defined(__x86_64__)
+    return 1;  /* we have a preloader */
+#else
+    return 0;  /* no exec needed */
+#endif
+}
+
+#elif defined(__linux__) && (defined(__i386__) || defined(__arm__))
+
+static void check_vmsplit( void *stack )
+{
+    if (stack < (void *)0x80000000)
+    {
+        /* if the stack is below 0x80000000, assume we can safely try a munmap there */
+        if (munmap( (void *)0x80000000, 1 ) == -1 && errno == EINVAL)
+            fprintf( stderr,
+                     "Warning: memory above 0x80000000 doesn't seem to be accessible.\n"
+                     "Wine requires a 3G/1G user/kernel memory split to work properly.\n" );
+    }
+}
+
+static void set_max_limit( int limit )
+{
+    struct rlimit rlimit;
+
+    if (!getrlimit( limit, &rlimit ))
+    {
+        rlimit.rlim_cur = rlimit.rlim_max;
+        setrlimit( limit, &rlimit );
+    }
+}
+
+static int pre_exec(void)
+{
+    int temp;
+
+    check_vmsplit( &temp );
+    set_max_limit( RLIMIT_AS );
+#ifdef __i386__
+    return 1;  /* we have a preloader on x86 */
+#else
+    return 0;
+#endif
+}
+
+#elif defined(__linux__) && (defined(__x86_64__) || defined(__aarch64__))
+
+static int pre_exec(void)
+{
+    return 1;  /* we have a preloader on x86-64/arm64 */
+}
+
+#elif defined(__APPLE__) && (defined(__i386__) || defined(__x86_64__))
+
+static int pre_exec(void)
+{
+    return 1;  /* we have a preloader */
+}
+
+#elif (defined(__FreeBSD__) || defined (__FreeBSD_kernel__) || defined(__DragonFly__))
+
+static int pre_exec(void)
+{
+    struct rlimit rl;
+
+    rl.rlim_cur = 0x02000000;
+    rl.rlim_max = 0x02000000;
+    setrlimit( RLIMIT_DATA, &rl );
+    return 1;
+}
+
+#else
+
+static int pre_exec(void)
+{
+    return 0;  /* no exec needed */
+}
+
+#endif
+
+
 /* canonicalize path and return its directory name */
 static char *realpath_dirname( const char *name )
 {
@@ -149,6 +279,8 @@ static void *load_ntdll( char *argv0 )
  */
 int main( int argc, char *argv[] )
 {
+    char error[1024];
+    int i;
     void *handle;
 
     if ((handle = load_ntdll( argv[0] )))
@@ -159,7 +291,28 @@ int main( int argc, char *argv[] )
         exit(1);
     }
 
-    fprintf( stderr, "wine: could not load ntdll.so: %s\n", dlerror() );
-    pthread_detach( pthread_self() );  /* force importing libpthread for OpenGL */
+    if (!getenv( "WINELOADERNOEXEC" ))  /* first time around */
+    {
+        static char noexec[] = "WINELOADERNOEXEC=1";
+
+        putenv( noexec );
+        check_command_line( argc, argv );
+        if (pre_exec())
+        {
+            wine_init_argv0_path( argv[0] );
+            wine_exec_wine_binary( NULL, argv, getenv( "WINELOADER" ));
+            fprintf( stderr, "wine: could not exec the wine loader\n" );
+            exit(1);
+        }
+    }
+
+    if (wine_main_preload_info)
+    {
+        for (i = 0; wine_main_preload_info[i].size; i++)
+            wine_mmap_add_reserved_area( wine_main_preload_info[i].addr, wine_main_preload_info[i].size );
+    }
+
+    wine_init( argc, argv, error, sizeof(error) );
+    fprintf( stderr, "wine: failed to initialize: %s\n", error );
     exit(1);
 }
